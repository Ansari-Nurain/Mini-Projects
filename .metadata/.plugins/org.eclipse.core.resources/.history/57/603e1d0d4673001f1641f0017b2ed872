package com.springBootDemo;

import java.util.List;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import com.springBootDemo.entity.User;

@SpringBootApplication
public class SpringBootDemoApplication {

	public static void main(String[] args) {
		ApplicationContext context = SpringApplication.run(SpringBootDemoApplication.class, args);
		
		Repository repository = context.getBean(Repository.class);
		
//		User user = new User();
//		user.setName("Nurain");
//		user.setCity("Siwan");
//		user.setStates("This is the first spring boot project");
//		
//		User save = repository.save(user);
//		System.out.println(save);
		
//		User user1 = new User();
//		user1.setName("Nurain");
//		user1.setCity("Siwan");
//		user1.setStates("This is the first spring boot project");
//		
//		User user2 = new User();
//		user2.setName("Ansari");
//		user2.setCity("Bihar");
//		user2.setStates("This is the first spring boot project");
//		
//		User user3 = new User();
//		user3.setName("Rahat");
//		user3.setCity("UP");
//		user3.setStates("This is the first spring boot project");
//				
//		List<User> users = List.of(user1,user2,user3);
//		List<User> result = repository.saveAll(users);
//		
//		result.forEach(user ->{
//			System.out.println(user);
//		});
		
		
		User user = repository.getById(1);
		
		Optional<User> userOptional = repository.findById(1);
		if (userOptional.isPresent()) {
		    User user = userOptional.get();
		    // Use the user object
		} else {
		    // Handle the case where the user is not found
		}

		
//		Example Handling for Not Found Case
//		If you want to throw an exception when the user is not found, you can do something like this:
		
		User user = repository.findById(1)
                .orElseThrow(() -> new EntityNotFoundException("User not found with id 1"));

		
	}

}
